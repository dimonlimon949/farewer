const axios = require('axios');
const fs = require('fs');
const puppeteer = require('puppeteer');

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData = getToken();

const {
    VK
} = require('vk-io');
const vk = require('../vk-api.js'); 

const commands = [];
const cmd = {
    hear: (pattern, action) => {
         commands.push([pattern, action]);

    }
};

const async = require('async');

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-–∞–Ω–∏–º–µ
cmd.hear(/^(?:—Ç–æ–ø–∏–∫)\s?/i, async (message, bot) => {
    return bot(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,{
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–∞–Ω–∏–º–µ`}),
                        "label": `üç≠ –õ–æ–ª–∏-–∞–Ω–∏–º–µ`
                    },
                    "color": "positive"
                },
                {
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–≥–∏—Ñ –∞–Ω–∏–º–µ`}),
                        "label": `‚ú® –ê–Ω–∏–º–µ-–≥–∏—Ñ–∫–∞`
                    },
                    "color": "positive"
                }]
            ]
        })
    })
});



module.exports = commands;