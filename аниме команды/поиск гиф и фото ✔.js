let utils = require('../utils.js');
const axios = require('axios');
const commands = [];
const fs = require('fs');
let double = require('../database/users.json');
const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

/**
 * –ß–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞.
 * @returns {object|null} –û–±—ä–µ–∫—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 */
function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('[getToken] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª.
 * @param {string} token –¢–æ–∫–µ–Ω VK API.
 * @param {boolean} spoler –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–ø–æ–π–ª–µ—Ä–æ–≤.
 * @param {boolean} chatlogi –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç–µ.
 */
function saveTokens(token, spoler, chatlogi) {
    const tokens = {
        token: token,
        spoler: spoler,
        chatlogi: chatlogi
    };

    try {
        fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
        console.log('[saveTokens] –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª.');
    } catch (error) {
        console.error('[saveTokens] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
}

const tokenData = getToken();
const chatlogi = tokenData ? tokenData.chatlogi : false;
const spoler = tokenData ? tokenData.spoler : false;

const {
    VK
} = require('vk-io');
const vk = require('../vk-api.js'); 

// –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
const categoryTranslations = {
    'catgirl': '–¥–µ–≤—É—à–∫–∞-–∫–æ—à–∫–∞',
    'foxgirl': '–¥–µ–≤—É—à–∫–∞-–ª–∏—Å–∞',
    'wolf-girl': '–¥–µ–≤—É—à–∫–∞-–≤–æ–ª–∫',
    'animal-ears': '–∑–≤–µ—Ä–∏–Ω—ã–µ-—É—à–∫–∏',
    'tail': '—Ö–≤–æ—Å—Ç',
    'tail-with-ribbon': '—Ö–≤–æ—Å—Ç-—Å-–ª–µ–Ω—Ç–æ–π',
    'tail-from-under-skirt': '—Ö–≤–æ—Å—Ç-–∏–∑-–ø–æ–¥-—é–±–∫–∏',
    'cute': '–º–∏–ª—ã–π',
    'cuteness-is-justice': '–º–∏–ª–æ—Ç–∞-—ç—Ç–æ-—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å',
    'blue-archive': '—Å–∏–Ω–∏–π-–∞—Ä—Ö–∏–≤',
    'girly': '–¥–µ–≤—á–∞—á–∏–π',
    'young-girl': '–º–æ–ª–æ–¥–∞—è-–¥–µ–≤—É—à–∫–∞',
    'maid': '–≥–æ—Ä–Ω–∏—á–Ω–∞—è',
    'maid-uniform': '—Ñ–æ—Ä–º–∞-–≥–æ—Ä–Ω–∏—á–Ω–æ–π',
    'vtuber': '–≤—Ç—É–±–µ—Ä',
    'w-sitting': '—Å–∏–¥–∏—Ç-–±—É–∫–≤–æ–π-w',
    'lying-down': '–ª–µ–∂–∏—Ç',
    'hands-forming-a-heart': '—Ä—É–∫–∏-–≤-—Ñ–æ—Ä–º–µ-—Å–µ—Ä–¥—Ü–∞',
    'wink': '–ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç',
    'valentine': '–≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞',
    'headphones': '–Ω–∞—É—à–Ω–∏–∫–∏',
    'thigh-high-socks': '—á—É–ª–∫–∏-–≤—ã—à–µ-–∫–æ–ª–µ–Ω',
    'knee-high-socks': '–≥–æ–ª—å—Ñ—ã-–¥–æ-–∫–æ–ª–µ–Ω',
    'white-tights': '–±–µ–ª—ã–µ-–∫–æ–ª–≥–æ—Ç–∫–∏',
    'black-tights': '—á–µ—Ä–Ω—ã–µ-–∫–æ–ª–≥–æ—Ç–∫–∏',
    'heterochromia': '–≥–µ—Ç–µ—Ä–æ—Ö—Ä–æ–º–∏—è',
    'uniform': '—Ñ–æ—Ä–º–∞',
    'sailor-uniform': '–º–∞—Ç—Ä–æ—Å—Å–∫–∞—è-—Ñ–æ—Ä–º–∞',
    'hoodie': '—Ç–æ–ª—Å—Ç–æ–≤–∫–∞',
    'ribbon': '–ª–µ–Ω—Ç–∞',
    'white-hair': '–±–µ–ª—ã–µ-–≤–æ–ª–æ—Å—ã',
    'blue-hair': '—Å–∏–Ω–∏–µ-–≤–æ–ª–æ—Å—ã',
    'long-hair': '–¥–ª–∏–Ω–Ω—ã–µ-–≤–æ–ª–æ—Å—ã',
    'blonde': '–±–ª–æ–Ω–¥–∏–Ω–∫–∞',
    'blue-eyes': '–≥–æ–ª—É–±—ã–µ-–≥–ª–∞–∑–∞',
    'purple-eyes': '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ-–≥–ª–∞–∑–∞'
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
cmd.hear(/^(?:–∫–∞—Ç–µ–≥–æ—Ä–∏–∏|—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)$/i, async (message, bot) => {
    console.log(`[cmd.hear] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${message.senderId}.`);

    let categoriesList = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n';
    for (const [english, russian] of Object.entries(categoryTranslations)) {
        categoriesList += `${russian} (${english})\n`;
    }

    console.log(`[cmd.hear] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${message.senderId}.`);
    return bot(categoriesList);
});

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
 * @param {object} message –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è VK.
 * @param {function} bot –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
 */
async function handleImageRequest(message, bot) {
    const userId = message.senderId;
    console.log(`[handleImageRequest] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}.`);

    let category = (message.args && message.args[1]) ? message.args[1] : undefined;

    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
    if (!category) {
        const availableCategories = Object.keys(categoryTranslations);
        category = availableCategories[Math.floor(Math.random() * availableCategories.length)];
        console.log(`[handleImageRequest] –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –í—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${category}".`);
        //await bot({ text: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –í—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${categoryTranslations[category]}"` });
    }


    try {
        const availableCategories = Object.keys(categoryTranslations);

        if (!availableCategories.includes(category)) {
            const russianCategory = category.toLowerCase();
            category = Object.keys(categoryTranslations).find(key => categoryTranslations[key] === russianCategory) || 'catgirl';
            console.log(`[handleImageRequest] –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${message.args[1]}" –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ "${category}".`);
        }

        if (!availableCategories.includes(category)) {
            category = 'catgirl';
            console.log(`[handleImageRequest] –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${message.args[1]}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–¥–µ–≤—É—à–∫–∞-–∫–æ—à–∫–∞".`);
            await bot({
                text: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${message.args[1]}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–¥–µ–≤—É—à–∫–∞-–∫–æ—à–∫–∞".`
            });
        }

        const API_ENDPOINT = `https://api.nekosia.cat/api/v1/images/${category}`;

        console.log(`[handleImageRequest] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: ${API_ENDPOINT}`);
        const responseStartTime = performance.now();
        const response = await axios.get(API_ENDPOINT, {
            responseType: 'json',
            params: {
                count: 1,
            }
        });
        const responseEndTime = performance.now();
        console.log(`[handleImageRequest] –û—Ç–≤–µ—Ç –æ—Ç API: Status ${response.status}, –í—Ä–µ–º—è: ${((responseEndTime - responseStartTime) / 1000).toFixed(2)} —Å–µ–∫.`);

        if (response.status !== 200 || !response.data.success || !response.data.image || !response.data.image.original) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. Status: ${response.status}, Success: ${response.data.success}`);
        }

        const imageUrl = response.data.image.original.url;
        const imageExtension = response.data.image.original.extension;

        console.log(`[handleImageRequest] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL: ${imageUrl}`);
        const imageDownloadStartTime = performance.now();
        const imageResponse = await axios.get(imageUrl, {
            responseType: 'arraybuffer',
        });
        const imageDownloadEndTime = performance.now();
        console.log(`[handleImageRequest] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –í—Ä–µ–º—è: ${((imageDownloadEndTime - imageDownloadStartTime) / 1000).toFixed(2)} —Å–µ–∫.`);

        if (imageResponse.status !== 200) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageResponse.status}`);
        }

        const imageBuffer = Buffer.from(imageResponse.data, 'binary');

        console.log(`[handleImageRequest] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ VK.`);
        const uploadStartTime = performance.now();
        const uploadResult = await vk.upload.messagePhoto({
            source: {
                value: imageBuffer,
                filename: `–¥–µ–≤—É—à–∫–∞.${imageExtension}`,
            }
        });
        const uploadEndTime = performance.now();
        console.log(`[handleImageRequest] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ VK. –í—Ä–µ–º—è: ${((uploadEndTime - uploadStartTime) / 1000).toFixed(2)} —Å–µ–∫, –†–µ–∑—É–ª—å—Ç–∞—Ç:`, uploadResult);

        if (uploadResult && uploadResult.id && uploadResult.ownerId) {
            const attachmentString = `photo${uploadResult.ownerId}_${uploadResult.id}`;

            console.log(`[handleImageRequest] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}.`);
            await message.send({
                attachment: attachmentString,
                keyboard: JSON.stringify({
                    "inline": true,
                    "buttons": [
                        [{
                            "action": {
                                "type": "text",
                                payload: JSON.stringify({
                                    command: `—Ç—è–Ω`
                                }),
                                "label": `üëÄ –•–æ—á—É –µ—â–µ `
                            },
                            "color": "positive"
                        }],
                        [{
                            "action": {
                                "type": "text",
                                payload: JSON.stringify({
                                    command: `–∫–∞—Ç–µ–≥–æ—Ä–∏–∏`
                                }),
                                "label": `üëÄ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∏–º–µ –∑–∞–ø—Ä–æ—Å–æ–≤`
                            },
                            "color": "positive"
                        }]
                    ]
                })

            });
        } else {
            console.error('[handleImageRequest] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–æ—Ç–æ:', uploadResult);
            await bot({
                text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ VK.'
            });
        }

    } catch (error) {
        console.error('[handleImageRequest] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—è–Ω:', error);
        if (error.response) {
            console.error('[handleImageRequest] –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
            console.error('[handleImageRequest] –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.status);
        } else if (error.request) {
            console.error('[handleImageRequest] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:', error.request);
        } else {
            console.error('[handleImageRequest] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        }
        await bot({
            text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        });
    }
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
cmd.hear(/^(?:—Ç—è–Ω|–¥–µ–≤—É—à–∫–∞|–∞–Ω–∏–º–µ)\s?(.*)?/i, async (message, bot) => {
    handleImageRequest(message, bot); // –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
});

module.exports = commands;