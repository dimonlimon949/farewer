let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();
let homes = require('../spisok/–¥–æ–º–∞.js')
let videocards = require('../spisok/–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.js')
const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


cmd.hear(/^(?:–ü–æ–¥–≤–∞–ª)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (message.user.realty.home === 0)
      return bot(`–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –ø–æ–¥–≤–∞–ª! ‚ùå`, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–¥–æ–º–∞`}),
                        "label": `üè† –î–æ–º–∞`
                    },
                    "color": "positive"
                }]
            ]
        })
    }); 

    if (!message.user.realty.basement)
      return bot(
        `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –ø–æ–¥–≤–∞–ª–µ:\n\nüåê –ü–æ–¥–≤–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ DogeCoin (DOG) ü™ô\nüí∞ –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ¬´–ö—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª¬ª ‚ùì`, {
          keyboard: JSON.stringify({
              "inline": true,
              "buttons": [
                  [{
                      "action": {
                          "type": "text",
                          payload: JSON.stringify({command: `–∫—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª`}),
                          "label": `üè† –ö—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª`
                      },
                      "color": "positive"
                  }]
              ]
          })
      }
      );

    if (message.user.realty.basement && message.user.misc.videocard_count < 1)
      return bot(
        `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –ø–æ–¥–≤–∞–ª–µ:\n\nüìº –£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç! ‚ùå\n‚ùì –ü–æ–∫—É–ø–∫–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç: –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã ‚òÉÔ∏è`
      );

    if (message.user.realty.basement && message.user.misc.videocard_count > 0) {
      const sell = videocards.find((x) => x.id === message.user.misc.videocard);

      return bot(
        `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –ø–æ–¥–≤–∞–ª–µ:\nüìº –í–∞—à–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã:\n ${sell.name} (${message.user.misc.videocard_count
        }—à—Ç.)\nüí∞ –ë–∞–ª–∞–Ω—Å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: ${utils.sp(
          message.user.videocard_dg
        )} DOG\nüî∏ –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å: –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å`
      );
    }
  }
});

cmd.hear(/^(?:–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.misc.videocard) return bot(`–£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã ‚ùå`);

    if (!message.user.videocard_dg)
      return bot(
        `–Ω–∞ –≤–∞—à–µ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–æ–≤—ã–µ DogeCoin –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ! ‚úÖ`
      );

    const dg_ = message.user.videocard_dg * message.user.misc.videocard_count;

    message.user.dcoins += dg_;

    message.user.videocard_dg = 0;

    return bot(
      `–≤—ã —Å–æ–±—Ä–∞–ª–∏ ${utils.sp(
        dg_
      )} DOG, —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å. ‚åö\nü™ô –ë–∞–ª–∞–Ω—Å DOG: ${utils.sp(
        message.user.dcoins
      )}`
    );
  }
});

cmd.hear(/^(?:–¥–æ–º|üè° –î–æ–º|–¥–æ–º–∞)\s?([0-9]+)?$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (message.user.realty.home !== 0 && !message.user.realty.basement) {
      return bot(
        `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –¥–æ–º–µ:\n\nüè° –î–æ–º: ¬´${homes[message.user.realty.home - 1].name
        }¬ª\n‚ñ∂Ô∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–∞–π–Ω–∏—Ç—å DogeCoin, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª!\nüî∞ –¶–µ–Ω–∞ –ø–æ–¥–≤–∞–ª–∞: 100 SpringCoins ‚ò£Ô∏è`
      );
    }

    if (message.user.realty.home !== 0 && message.user.realty.basement) {
      return bot(
        `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –¥–æ–º–µ:\n\nüè° –î–æ–º: ¬´${homes[message.user.realty.home - 1].name
        }¬ª\n‚ñ∂Ô∏è –ü–æ–¥–≤–∞–ª: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`
      );
    }

    utils.pick([`üå∑`, `üå∏`, `üåπ`, `üå∫`, `üåº`, `üíê`, `‚ù§Ô∏è`, `üíì`, `üíï`]);

    if (!message.args[1] && message.user.realty.home === 0)
      return bot(`–¥–æ–º–∞:

${message.user.realty.home === 1 ? "‚úîÔ∏è" : "‚úñÔ∏è"
        } 1. –î–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–π –¥–æ–º–∏–∫ (${utils.sp(
          homes.find((x) => x.id === Number(1)).cost
        )}$)
${message.user.realty.home === 2 ? "‚úîÔ∏è" : "‚úñÔ∏è"} 2. –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–º–∏–∫ (${utils.sp(
          homes.find((x) => x.id === Number(2)).cost
        )}$)
${message.user.realty.home === 3 ? "‚úîÔ∏è" : "‚úñÔ∏è"
        } 3. –û—Å–æ–±–Ω—è–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞ (${utils.sp(
          homes.find((x) => x.id === Number(3)).cost
        )}$)
${message.user.realty.home === 4 ? "‚úîÔ∏è" : "‚úñÔ∏è"} 4. –ó–∞–≥–æ—Ä–æ–¥–Ω—ã–π –¥–æ–º (${utils.sp(
          homes.find((x) => x.id === Number(4)).cost
        )}$)
${message.user.realty.home === 5 ? "‚úîÔ∏è" : "‚úñÔ∏è"} 5. –î–æ–º –¢–∏–º–∞ –ö—É–∫–∞ (${utils.sp(
          homes.find((x) => x.id === Number(5)).cost
        )}$)

üõí–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–î–æ–º [–Ω–æ–º–µ—Ä]¬ª `);

    const sell = homes.find((x) => x.id === Number(message.args[1]));

    if (!sell) return;

    if (message.user.realty.home)
      return bot(
        `—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º (${homes[message.user.realty.home - 1].name
        }), –≤–≤–µ–¥–∏—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å –¥–æ–º"`
      );

    if (message.user.balance < sell.cost) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥`);
    else if (message.user.balance >= sell.cost) {
      message.user.balance -= sell.cost;

      message.user.realty.home = sell.id;

      return bot(`–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(sell.cost)}$`);
    }
  }
});

cmd.hear(
  /^(?:–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã|üîã –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã)\s?([0-9]+)?\s?(.*)?$/i,
  async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
      if (message.user.realty.home === 0) return bot(`—É –í–∞—Å –Ω–µ—Ç –¥–æ–º–∞! ‚ùå`);

      if (!message.user.realty.basement) return bot(`—É –í–∞—Å –Ω–µ—Ç –ø–æ–¥–≤–∞–ª–∞! ‚ùå`);

      if (!message.args[1])
        return bot(`–ú–∞–π–Ω–∏–Ω–≥ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã:

${message.user.misc.videocard === 1 ? "‚úîÔ∏è" : "‚úñÔ∏è"
          } 1. MSI Radeon R7360 OC (2.000 DogeCoins/—á–∞—Å) (100 SpringCoins)
${message.user.misc.videocard === 2 ? "‚úîÔ∏è" : "‚úñÔ∏è"
          } 2. GIGABYTE GeForce GTV 750 Ti (100.000 DogeCoins/—á–∞—Å) (250 SpringCoins)
${message.user.misc.videocard === 3 ? "‚úîÔ∏è" : "‚úñÔ∏è"
          } 3. Gigabyte GeForce GTX 1080 (500.000 DogeCoins/—á–∞—Å) (500 SpringCoins)

üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]¬ª`);

      const sell = videocards.find((x) => x.id === Number(message.args[1]));

      if (!sell) return;

      const count = Math.floor(message.args[2] ? Number(message.args[2]) : 1);

      if (count <= 0) return bot(`–í—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª-–≤–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –º–µ–Ω—å—à–µ 1-–≥–æ ‚ùå`);

      if (message.args[1] < 1 || message.args[1] >= 4)
        return bot("üòí –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.");

      if (
        count + message.user.misc.videocard_count >
        message.user.limit.videocardlimit
      )
        return bot(
          `–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –±–æ–ª—å—à–µ ${message.user.limit.videocardlimit}—à—Ç. –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ‚ùå`
        );

      if (
        message.user.misc.videocard !== 0 &&
        message.user.misc.videocard !== message.args[1]
      )
        return bot(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞! ‚ùå`);

      if (message.user.sprcoin < sell.cost * count)
        return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SpringCoins ‚ùå`);
      else if (message.user.sprcoin >= sell.cost * count) {
        message.user.sprcoin -= sell.cost * count;

        message.user.misc.videocard = sell.id;

        message.user.misc.videocard_count += count;

        return bot(
          `–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª (${count} —à—Ç.) –∑–∞ ${utils.sp(
            sell.cost * count
          )} SpringCoins ‚ò£Ô∏è`
        );
      }
    }
  }
);

module.exports = commands;
