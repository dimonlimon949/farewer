let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let users = require('../database/users.json') 
let chats = require('../database/chats.json')
let bossinfo = require('../database/bossinfo.json')
let botinfo = require('../database/botinfo.json')
let clans = require('../database/clans.json')
let val = require('../–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json')
let sal = require('../–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å—Å—ã–ª–∫–∏ —á–∞—Ç–æ–≤.json')
let bog = require('../–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json')
 let help = "botinfo,val,sal,bog,"
const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}


function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}


const tokenData = getToken();

const chatlogi = tokenData.chatlogi;  
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

cmd.hear(/^(?:eval|!eval|!)([^]+)$/i, async (message) => {
  const groupInfo = await vk.api.call('groups.getById', {
    access_token: tokenData.token,
    v: '5.131',
  });

  if (!groupInfo || groupInfo.length === 0) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
  }


  const groupId = groupInfo[0].id;

  const admins = await vk.api.groups.getMembers({ group_id: groupId, filter: 'managers' });

   if (!admins.items.find(x => x.id === message.senderId)) return;

  const startTime = Date.now();

  try {
    const inputCode = message.args.slice(1).join(' ').trim();
    if (!inputCode) throw new Error("–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.");

  

    const result = eval(inputCode);
    const executionTime = Date.now() - startTime;


    let responseMessage = `üìï –¢–∏–ø: ${typeof result}\nüÜö –ò—Ç–æ–≥: ${JSON.stringify(result, null, '&#12288;\t')}\n\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${executionTime} –º—Å.`;

    return message.send(responseMessage);
  } catch (e) {
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞:', e);

    let suggestion = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:\n";
    if (e.message.includes("is not defined")) {
      suggestion += "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏.\n";
    } else if (e.message.includes("Unexpected token")) {
      suggestion += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–∞—à–µ–≥–æ –∫–æ–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–ø—É—â–µ–Ω–∞ —Ñ–∏–≥—É—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞ –∏–ª–∏ –∑–∞–ø—è—Ç–∞—è.\n";
    } else if (e.message.includes("Cannot read property")) {
      suggestion += "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–±—ä–µ–∫—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\n";
    } else if (e.message.includes("Unexpected end of input")) {
      suggestion += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ª–∏ —Ñ–∏–≥—É—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞ –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞.\n";
    } else {
      suggestion += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.\n";
    }

    const userFriendlyErrorMessage = `–û—à–∏–±–∫–∞: ${e.message}\n\n${suggestion}\n\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${Date.now() - startTime} –º—Å.`;
    return message.send(userFriendlyErrorMessage);
  }
});

cmd.hear(/^(?:zz)\s(\d+)(?:\s(\w+)(?:\s([+\-/]?=)\s*(-?\d+(\.\d+)?|true|false|.+))?)?$/i, async (message, bot) => {
  const groupInfo = await vk.api.call('groups.getById', {
    access_token: tokenData.token,
    v: '5.131',
  });

  if (!groupInfo || groupInfo.length === 0) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
  }


  const groupId = groupInfo[0].id;

  const admins = await vk.api.groups.getMembers({ group_id: groupId, filter: 'managers' });

   if (!admins.items.find(x => x.id === message.senderId)) return;
    const uid = parseInt(message.args[1], 10);
    const variableName = message.args[2];
    const operation = message.args[3];
    const value = message.args[4];
    const startTime = Date.now();

    const protectedVariables = ['uid', 'id']; 
    let foundUsers = users.filter(user => user.uid === uid);

    if (foundUsers.length === 0) {
      await message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UID ${uid} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }

    const user = foundUsers[0];

    const inputCode = message.args.slice(1).join(' ').trim();

    if (!variableName) {
      const userVariables = Object.keys(user)
        .map(key => {
          const value = user[key];
          let formattedValue;

          if (typeof value === 'string') {
            formattedValue = value; 
          } else if (typeof value === 'object' && value !== null) {
            formattedValue = JSON.stringify(value);
          } else {
            formattedValue = String(value); 
          }

          return `"${key}": *${formattedValue}*`;
        })
        .join('\n');
      await bot(`${userVariables}`);
      return;
    }



    if (!user.hasOwnProperty(variableName)) {
      await message.send(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variableName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
      return;
    }

    let currentValue = user[variableName];
    const variableType = typeof currentValue;


    if (!operation) {
      let resultDisplay;
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      resultDisplay = variableType === 'number' ? utils.sp(currentValue.toString()) : currentValue.toString();

      await message.send(`üìï –¢–∏–ø: ${variableType}\nüÜö –†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultDisplay}\n\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${executionTime} –º—Å.`);
      return;
    }


    if (protectedVariables.includes(variableName)) {
      await message.send(`–ü–µ—Ä–µ–º–µ–Ω–Ω—É—é "${variableName}" –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å.`);
      return;
    }


    const sendResult = async (type, result, startTime) => {
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      await message.send(`üìï –¢–∏–ø: ${type}\nüÜö –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}\n\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${executionTime} –º—Å.`);
    };

    if (variableType === 'number') {
      const parsedValue = parseFloat(value);
      if (isNaN(parsedValue)) {
        await message.send(`–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ "${value}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variableName}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.`);
        return;
      }


      let result;

      switch (operation) {
        case '+=':
          user[variableName] = currentValue + parsedValue;
          result = user[variableName];
          break;
        case '-=':
          user[variableName] = currentValue - parsedValue;
          result = user[variableName];
          break;
        case '=':
          user[variableName] = parsedValue;
          result = user[variableName];
          break;
        case '*=':
          user[variableName] = currentValue * parsedValue;
          result = user[variableName];
          break;
        case '/=':
          if (parsedValue !== 0) {
            user[variableName] = currentValue / parsedValue;
            result = user[variableName];
          } else {
            await message.send(`–û—à–∏–±–∫–∞: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.`);
            return;
          }
          break;
        default:
          await message.send(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${operation}`);
          return;
      }

      await sendResult('number', result, startTime);

    } else if (variableType === 'string') {
      if (operation === '=') {
        user[variableName] = value;
        await sendResult('string', `"${value}"`, startTime);
      } else {
        await message.send(`–û–ø–µ—Ä–∞—Ü–∏—è "${operation}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Å—Ç—Ä–æ–∫.`);
      }
    } else if (variableType === 'boolean') {

      if (operation === '=') {
        if (value === 'true') {
          user[variableName] = true;
          await sendResult('boolean', 'true', startTime);
        } else if (value === 'false') {
          user[variableName] = false;
          await sendResult('boolean', 'false', startTime);
        } else {
          await message.send(`–û—à–∏–±–∫–∞: –î–ª—è –±—É–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è "true" –∏–ª–∏ "false".`);
          return;
        }
      } else {
        await message.send(`–û–ø–µ—Ä–∞—Ü–∏—è "${operation}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –±—É–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.`);
      }
    }

});



module.exports = commands;
