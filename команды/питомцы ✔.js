let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

let pets = require('../spisok/–ø–∏—Ç–æ–º—Ü—ã.js')
let pets2 = require('../spisok/–ø–∏—Ç–æ–º—Ü—ã2.js')
let pets3 = require('../spisok/–ø–∏—Ç–æ–º—Ü—ã3.js')
let petsupd = require('../spisok/–ø–∏—Ç–æ–º—Ü—ã—É–ª.js')


function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}




// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

let tokensCache = null;
      
setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }

}, 1000);

function addZero(num) {
  return num < 10 ? '0' + num : num;
}

function unixStampLefta(stampa) {
  stampa = stampa / 1000; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã
  let s = Math.floor(stampa % 60); // –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 60 –¥–ª—è —Å–µ–∫—É–Ω–¥
  stampa = Math.floor(stampa / 60); // –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã

  let m = Math.floor(stampa % 60); // –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 60 –¥–ª—è –º–∏–Ω—É—Ç
  stampa = Math.floor(stampa / 60); // –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Ç—ã

  let h = Math.floor(stampa % 24); // –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 24 –¥–ª—è —á–∞—Å–æ–≤
  let d = Math.floor(stampa / 24); // –î–µ–ª–∏–º –Ω–∞ 24 –¥–ª—è –¥–Ω–µ–π
  let y = Math.floor(d / 365); // –î–µ–ª–∏–º –Ω–∞ 365 –¥–ª—è –ª–µ—Ç
  d = d % 365; // –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 365 –¥–ª—è –¥–Ω–µ–π

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏
  let text = '';
  if (y > 0) text += `${y} –≥. `;
  if (d > 0) text += `${d} –¥. `;
  if (h > 0) text += `${addZero(h)} —á. `;
  text += `${addZero(m)} –º–∏–Ω. ${addZero(s)} —Å–µ–∫.`;

  return text.trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
}


cmd.hear(
  /^(?:–ø–∏—Ç–æ–º—Ü—ã|ü¶ä –ü–∏—Ç–æ–º—Ü—ã|@club223500959 ü¶ä –ü–∏—Ç–æ–º—Ü—ã)\s?([0-9]+)?$/i,
  async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
      if (!message.args[1])
        return bot(`–ø–∏—Ç–æ–º—Ü—ã:
üê† 1. –†—ã–±–∫–∞ (${utils.sp(pets.find((x) => x.id === Number(1)).cost)}${val1})
üê¢ 2. –ß–µ—Ä–µ–ø–∞—à–∫–∞ (${utils.sp(pets.find((x) => x.id === Number(2)).cost)}${val1})
ü¶Ü 3. –£—Ç–∫–∞ (${utils.sp(pets.find((x) => x.id === Number(3)).cost)}${val1})
üê∑ 4. –°–≤–∏–Ω—å—è (${utils.sp(pets.find((x) => x.id === Number(4)).cost)}${val1})
ü¶ò 5. –ö–µ–Ω–≥—É—Ä—É (${utils.sp(pets.find((x) => x.id === Number(5)).cost)}${val1})
üê∂ 6. –°–æ–±–∞–∫–∞ (${utils.sp(pets.find((x) => x.id === Number(6)).cost)}${val1})
üêº 7. –ü–∞–Ω–¥–∞ (${utils.sp(pets.find((x) => x.id === Number(7)).cost)}${val1})
ü¶ñ 8. –î–∏–Ω–æ–∑–∞–≤—Ä (${utils.sp(pets.find((x) => x.id === Number(8)).cost)}${val1})
üêù 9. –ü—á–µ–ª–∫–∞ (${utils.sp(
          pets.find((x) => x.id === Number(9)).cost
        )} SpringCoins ‚ò£)
üêã 10. –ö–∏—Ç (${utils.sp(
          pets.find((x) => x.id === Number(10)).cost
        )} SpringCoins ‚ò£)

üõí –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ ¬´–ü–∏—Ç–æ–º—Ü—ã [–Ω–æ–º–µ—Ä]¬ª`);

      const sell = pets.find((x) => x.id === Number(message.args[1]));

      if (!sell) return;

      if (message.user.misc.pet) return bot(`—É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü.`);

      if (message.args[1] < 1 || message.args[1] > 10)
        return bot("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∏—Ç–æ–º—Ü–∞.");

      if (message.args[1] < 9) {
        if (message.user.balance < sell.cost)
          return bot(
            `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\nüê∂ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∏—Ç–æ–º—Ü–∞: ${utils.sp(
              sell.cost
            )}${val1}\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)}$${val1}`
          );
        else if (message.user.balance >= sell.cost) {
          message.user.balance -= sell.cost;

          message.user.misc.pet = sell.id;

          message.user.pet.lvl += 1;
        }
      }

      if (message.args[1] > 8) {
        if (message.user.sprcoin < sell.cost)
          return bot(
            `–≤–∞–º –Ω—É–∂–Ω–æ ${utils.sp(sell.cost)} SpringCoins‚ò£ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.`
          );
        else if (message.user.sprcoin >= sell.cost) {
          message.user.sprcoin -= sell.cost;

          message.user.misc.pet = sell.id;

          message.user.pet.lvl += 1;
        }
      }

      const pet = pets.find((x) => x.id === message.user.misc.pet);

      return bot(
        `–≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(
          sell.cost
        )}${val1} üíµ\n\n„ÄΩÔ∏è –ü—Ä–æ–∫–∞—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–∏–Ω–æ—Å–∏–ª –µ—â—ë –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥! ${pet.ico
        }`
      );
    }
  }
);

cmd.hear(/^(?:–ø–∏—Ç–æ–º–µ—Ü)$/i, async (message, bot) => {
  if (message.user.misc.pet < 1) return bot(`—É –í–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞.`);
  else {
    const pet = pets.find((x) => x.id === message.user.misc.pet);

    let text;
    let attachment;
    let upgradeCost;

    if (pets[message.user.misc.pet - 1].id > 19) {
      upgradeCost = utils.sp(
        petsupd[message.user.misc.pet - 1].cost * message.user.pet.lvl
      );
      text = `–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
${pet.ico} –ü–∏—Ç–æ–º–µ—Ü: ¬´${pets[message.user.misc.pet - 1].name}¬ª
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: ${upgradeCost} SpringCoins ‚ò£Ô∏è
üåü –£—Ä–æ–≤–µ–Ω—å: ${message.user.pet.lvl}`;
      attachment = pets[message.user.misc.pet - 1].photo;
    } else {
      upgradeCost = utils.sp(
        petsupd[message.user.misc.pet - 1].cost * message.user.pet.lvl
      );
      text = `–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –ø–∏—Ç–æ–º—Ü–µ: ‚ùÑÔ∏è
${pet.ico} –ü–∏—Ç–æ–º–µ—Ü: ¬´${pets[message.user.misc.pet - 1].name}¬ª üî•
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: ${upgradeCost}$
„ÄΩÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${utils.sp(message.user.pet.lvl)}`;
      attachment = pets[message.user.misc.pet - 1].photo;
    }


    const keyboard = {
      inline: true,
      buttons: [
        [
          {
            action: {
              type: "text",
              payload: { command: `–ø–∏—Ç–æ–º–µ—Ü –ø–æ—Ö–æ–¥` },
              label: `üêæ –ü–æ—Ö–æ–¥`,
            },
            color: "primary",
          },
          {
            action: {
              type: "text",
              payload: { command: `–ø–∏—Ç–æ–º–µ—Ü —É–ª—É—á—à–∏—Ç—å` },
              label: `‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å (${upgradeCost}${pets[message.user.misc.pet - 1].id > 19 ? ' SpringCoins' : '$'})`, // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
            },
            color: "positive",
          },
        ],
      ],
    };

    return bot(text, { attachment: attachment, keyboard: JSON.stringify(keyboard) });
  }
});

cmd.hear(/^(?:–ø–∏—Ç–æ–º–µ—Ü 2)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (message.user.misc.pet2 < 1) return bot(`—É –í–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞.`);
    else {
      const pet2 = pets2.find((x) => x.id === message.user.misc.pet2);
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ petsupd2 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞ 2
      const upgradeCost = petsupd2 && petsupd2[message.user.misc.pet2 - 1]
        ? utils.sp(petsupd2[message.user.misc.pet2 - 1].cost * message.user.pet2.lvl) // –ò—Å–ø–æ–ª—å–∑—É–µ–º user.pet2.lvl
        : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"; // –ò–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      const keyboard = {
        inline: true,
        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { command: `–ø–∏—Ç–æ–º–µ—Ü 2 –ø–æ—Ö–æ–¥` },
                label: `üêæ –ü–æ—Ö–æ–¥`,
              },
              color: "primary",
            },
            {
              action: {
                type: "text",
                payload: { command: `–ø–∏—Ç–æ–º–µ—Ü 2 —É–ª—É—á—à–∏—Ç—å` },
                label: `‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å (${upgradeCost}${pets2[message.user.misc.pet2 - 1].id > 19 ? ' SpringCoins' : '$'})`, // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
              },
              color: "positive",
            },
          ],
        ],
      };

      return bot(
        `–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

${pet2.ico} –ü–∏—Ç–æ–º–µ—Ü: ¬´${pets2[message.user.misc.pet2 - 1].name}¬ª

`,
        { attachment: pets2[message.user.misc.pet2 - 1].photo, keyboard: JSON.stringify(keyboard) }
      );
    }
  }
});

cmd.hear(/^(?:–ø–∏—Ç–æ–º–µ—Ü 3)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (message.user.misc.pet3 < 1) return bot(`—É –í–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞.`);
    else {
      const pet3 = pets3.find((x) => x.id === message.user.misc.pet3);
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ petsupd3 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞ 3
      const upgradeCost = petsupd3 && petsupd3[message.user.misc.pet3 - 1]
        ? utils.sp(petsupd3[message.user.misc.pet3 - 1].cost * message.user.pet3.lvl)  // –ò—Å–ø–æ–ª—å–∑—É–µ–º user.pet3.lvl
        : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"; // –ò–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      const keyboard = {
        inline: true,
        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { command: `–ø–∏—Ç–æ–º–µ—Ü 3 –ø–æ—Ö–æ–¥` },
                label: `üêæ –ü–æ—Ö–æ–¥`,
              },
              color: "primary",
            },
            {
              action: {
                type: "text",
                payload: { command: `–ø–∏—Ç–æ–º–µ—Ü 3 —É–ª—É—á—à–∏—Ç—å` },
                label: `‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å (${upgradeCost}${pets3[message.user.misc.pet3 - 1].id > 19 ? ' SpringCoins' : '$'})`, // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
              },
              color: "positive",
            },
          ],
        ],
      };

      return bot(
        `–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

${pet3.ico} –ü–∏—Ç–æ–º–µ—Ü: ¬´${pets3[message.user.misc.pet3 - 1].name}¬ª

`,
        { attachment: pets3[message.user.misc.pet3 - 1].photo, keyboard: JSON.stringify(keyboard) }
      );
    }
  }
});

cmd.hear(/^(?:–ø–∏—Ç–æ–º–µ—Ü —É–ª—É—á—à–∏—Ç—å)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    let lvlpoupd;
    let priceupd;
    if (message.user.inf === true) return bot(`–í—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`);

    if (message.user.misc.pet < 1)
      return bot(
        `—É –í–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! üòø\n\n‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É ¬´–ü–∏—Ç–æ–º—Ü—ã¬ª üõí`
      );
    else {
      const pet = pets.find((x) => x.id === message.user.misc.pet);

      if (pets[message.user.misc.pet - 1].id === 20) {
        if (
          message.user.sprcoin <
          petsupd[message.user.misc.pet - 1].cost * message.user.pet.lvl
        )
          return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SpringCoins ‚ò£Ô∏è`);

        if (message.user.pet.lvl > 14)
          return bot(`–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω! ${pet.ico}`);

        priceupd = petsupd[message.user.misc.pet - 1].cost * message.user.pet.lvl;

        lvlpoupd = message.user.pet.lvl + 1;

        message.user.sprcoin -= priceupd;

        message.user.pet.lvl += 1;

        return bot(`–ø–∏—Ç–æ–º–µ—Ü –±—ã–ª –ø—Ä–æ–∫–∞—á–µ–Ω –¥–æ ${lvlpoupd} —É—Ä–æ–≤–Ω—è –∑–∞ ${utils.sp(
          priceupd
        )} SpringCoins ‚ò£Ô∏è
	–ë–∞–ª–∞–Ω—Å SpringCoins: ${utils.sp(message.user.sprcoin)} ‚ò£Ô∏è`);
      }

      if (
        message.user.balance <
        petsupd[message.user.misc.pet - 1].cost * message.user.pet.lvl
      )
        return bot(
          `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\n‚ñ∂Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: ${utils.sp(
            petsupd[message.user.misc.pet - 1].cost * message.user.pet.lvl
          )}${val1} üíµ\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)}$${val1}`
        );

      if (message.user.pet.lvl > 14)
        return bot(`–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω! üò∏`);

      priceupd = petsupd[message.user.misc.pet - 1].cost * message.user.pet.lvl;

      lvlpoupd = message.user.pet.lvl + 1;

      message.user.balance -= priceupd;

      message.user.pet.lvl += 1;

      return bot(`–ø–∏—Ç–æ–º–µ—Ü –±—ã–ª –ø—Ä–æ–∫–∞—á–µ–Ω –¥–æ ${lvlpoupd} —É—Ä–æ–≤–Ω—è –∑–∞ ${utils.sp(
        priceupd
      )}${val1} üíµ
‚ñ∂Ô∏è –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1} üí∞`);
    }
  }
});

cmd.hear(/^(?:–ø–∏—Ç–æ–º–µ—Ü 2 –ø–æ—Ö–æ–¥)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    const pet = pets2.find((x) => x.id === message.user.misc.pet2);

    const earn = utils.random(pet.min, pet.max);

    if (message.user.timers.poxod2 > Date.now())
      return bot(
        `–≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –ø–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ ${unixStampLefta(
          message.user.timers.poxod2 - Date.now()
        )} –í–∞—à –ø–∏—Ç–æ–º–µ—Ü –¥–æ–≤–æ–ª—å–Ω–æ —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞–ª!`
      );

    message.user.sprcoin += earn;

    message.user.timers.poxod2 = Date.now() + 300000;

    return bot(`–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(earn)} SpringCoins ‚ò£.`);
  }
});

cmd.hear(/^(?:–ø–∏—Ç–æ–º–µ—Ü 3 –ø–æ—Ö–æ–¥)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    const pet = pets3.find((x) => x.id === message.user.misc.pet3);

    const earn = utils.random(pet.min, pet.max);

    if (message.user.timers.poxod3 > Date.now())
      return bot(
        `–≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –ø–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ ${unixStampLefta(
          message.user.timers.poxod3 - Date.now()
        )} –í–∞—à –ø–∏—Ç–æ–º–µ—Ü –¥–æ–≤–æ–ª—å–Ω–æ —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞–ª!`
      );

    message.user.sprcoin += earn;

    message.user.timers.poxod3 = Date.now() + 300000;

    return bot(`–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(earn)} SpringCoins ‚ò£.`);
  }
});


cmd.hear(/^(?:–ø–∏—Ç–æ–º–µ—Ü –ø–æ—Ö–æ–¥)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (message.user.misc.pet < 1) return bot(`—É –í–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞.`);
    else {
      if (pets[message.user.misc.pet - 1].id === 20) {
        let prize = utils.pick([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

        if (message.user.timers.poxod > Date.now())
          return bot(
            `–≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –ø–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ ${unixStampLefta(
              message.user.timers.poxod - Date.now()
            )} –í–∞—à –ø–∏—Ç–æ–º–µ—Ü –¥–æ–≤–æ–ª—å–Ω–æ —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞–ª!`
          );

        message.user.timers.poxod = Date.now() + 3600000;

        const pet = pets.find((x) => x.id === message.user.misc.pet);

        const earn = utils.random(pet.min, pet.max) * message.user.pet.lvl;

        if (prize === 1) {
          message.user.sprcoin += earn;

          return bot(
            `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
              earn
            )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
          );
        }

        if (prize === 2) {
          message.user.sprcoin += earn;

          return bot(
            `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
              earn
            )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
          );
        }

        if (prize === 3) {
          message.user.sprcoin += earn;

          return bot(
            `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
              earn
            )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
          );
        }

        if (prize === 4) {
          message.user.sprcoin += earn;

          return bot(
            `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
              earn
            )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
          );
        }

        if (prize === 5) {
          message.user.sprcoin += earn;

          return bot(
            `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
              earn
            )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
          );
        }

        if (prize === 6) {
          message.user.sprcoin += earn;

          return bot(`–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!

		`);
        }

        if (prize === 7) {
          message.user.sprcoin += earn;

          return bot(
            `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
              earn
            )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
          );
        }

        if (prize === 8) {
          message.user.sprcoin += earn;

          return bot(
            `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
              earn
            )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
          );
        }

        if (prize === 9) {
          message.user.sprcoin += earn;

          return bot(
            `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
              earn
            )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
          );
        }

        if (prize === 10) {
          message.user.sprcoin += earn;

          return bot(
            `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
              earn
            )} SpringCoins ‚ò£Ô∏è. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
          );
        }
      }

      let prize = utils.pick([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

      if (message.user.timers.poxod > Date.now())
        return bot(
          `–≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ –ø–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ ${unixStampLefta(
            message.user.timers.poxod - Date.now()
          )} –í–∞—à –ø–∏—Ç–æ–º–µ—Ü –¥–æ–≤–æ–ª—å–Ω–æ —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞–ª!`
        );

      const pet = pets.find((x) => x.id === message.user.misc.pet);

      const earn = utils.random(pet.min, pet.max) * message.user.pet.lvl;

      message.user.timers.poxod = Date.now() + 3600000;

      if (prize === 1) {
        message.user.balance += earn;

        return bot(
          `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
        );
      }

      if (prize === 2) {
        message.user.balance += earn;

        return bot(
          `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
        );
      }

      if (prize === 3) {
        message.user.balance += earn;

        return bot(
          `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
        );
      }

      if (prize === 4) {
        message.user.balance += earn;

        return bot(
          `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
        );
      }

      if (prize === 5) {
        message.user.balance += earn;

        return bot(
          `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
        );
      }

      if (prize === 6) {
        message.user.balance += earn;

        return bot(`–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
          earn
        )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!

		`);
      }

      if (prize === 7) {
        message.user.balance += earn;

        return bot(
          `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
        );
      }

      if (prize === 8) {
        message.user.balance += earn;

        return bot(
          `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
        );
      }

      if (prize === 9) {
        message.user.balance += earn;

        return bot(
          `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
        );
      }

      if (prize === 10) {
        message.user.balance += earn;

        return bot(
          `–≤–∞—à –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—à—ë–ª –≤ –ø–æ—Ö–æ–¥–µ ${utils.sp(
            earn
          )} ${val1}. –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`
        );
      }
    }
  }
});


module.exports = commands;
