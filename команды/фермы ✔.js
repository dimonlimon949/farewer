let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}



// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
let farms = require('../spisok/—Ñ–µ—Ä–º—ã.js')
const vk = require('../vk-api.js'); 

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

const val1 = tokenData3.val1
const val2 = tokenData3.val2
const val3 = tokenData3.val3
const val4 = tokenData3.val4
const val5 = tokenData3.val5

cmd.hear(/^(?:—Ñ–µ—Ä–º—ã|üîã –§–µ—Ä–º—ã)\s?([0-9]+)?\s?([0-9]+)?$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.args[1]) {
      return bot(`üîã –ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º—ã:\n
        ${message.user.misc.farm === 1 ? '‚úîÔ∏è' : '‚úñÔ∏è'} 1. ${
        farms.find((x) => x.id === Number(1)).name
      } ${utils.sp(
        farms.find((x) => x.id === Number(1)).prib
      )} ‚Çø/—á. (${utils.sp(
        farms.find((x) => x.id === Number(1)).cost
      )} ${val1})\n
        ${message.user.misc.farm === 2 ? '‚úîÔ∏è' : '‚úñÔ∏è'} 2. ${
        farms.find((x) => x.id === Number(2)).name
      } ${utils.sp(
        farms.find((x) => x.id === Number(2)).prib
      )} ‚Çø/—á. (${utils.sp(
          farms.find((x) => x.id === Number(2)).cost
        )} ${val1})\n
        ${message.user.misc.farm === 3 ? '‚úîÔ∏è' : '‚úñÔ∏è'} 3. ${
        farms.find((x) => x.id === Number(3)).name
      } ${utils.sp(
        farms.find((x) => x.id === Number(3)).prib
      )} ‚Çø/—á. (${utils.sp(
          farms.find((x) => x.id === Number(3)).cost
        )} ${val1})\n
        ${message.user.misc.farm === 4 ? '‚úîÔ∏è' : '‚úñÔ∏è'} 4. ${
        farms.find((x) => x.id === Number(4)).name
      } ${utils.sp(
        farms.find((x) => x.id === Number(4)).prib
      )} ‚Çø/—á. (${utils.sp(
          farms.find((x) => x.id === Number(4)).cost
        )} ${val1})\n
        ${message.user.misc.farm === 5 ? '‚úîÔ∏è' : '‚úñÔ∏è'} 5. ${
        farms.find((x) => x.id === Number(5)).name
      } ${utils.sp(
        farms.find((x) => x.id === Number(5)).prib
      )} ‚Çø/—á. (${utils.sp(
          farms.find((x) => x.id === Number(5)).cost
        )} ${val1})\n
        ${message.user.misc.farm === 6 ? '‚úîÔ∏è' : '‚úñÔ∏è'} 6. ${
        farms.find((x) => x.id === Number(6)).name
      } ${utils.sp(
        farms.find((x) => x.id === Number(6)).prib
      )} ‚Çø/—á. (${utils.sp(
          farms.find((x) => x.id === Number(6)).cost
        )} ${val1})\n
        ${message.user.misc.farm === 7 ? '‚úîÔ∏è' : '‚úñÔ∏è'} 7. ${
        farms.find((x) => x.id === Number(7)).name
      } ${utils.sp(
        farms.find((x) => x.id === Number(7)).prib
      )} ‚Çø/—á. (${utils.sp(
          farms.find((x) => x.id === Number(7)).cost
        )} ${val1})\n
        
        \nüõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–§–µ—Ä–º—ã [–Ω–æ–º–µ—Ä] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]¬ª`);
    }
    if (message.user.inf) {
      return bot(`üëÅÔ∏è –í—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`);
    }

    const sell = farms.find(x => x.id === Number(message.args[1]));
    if (!sell) return;

    const count = Math.floor(message.args[2] ? Number(message.args[2]) : 1);
    if (count <= 0) return bot(`‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ—Ä–º –º–µ–Ω—å—à–µ 1-–≥–æ.`);

    if (message.args[1] < 1 || message.args[1] >= 8) return bot('üòí –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–µ—Ä–º.');

    if (!message.user.settings.imperator) {
      if (count + message.user.misc.farm_count > message.user.limit.farmlimit) {
        return bot(`‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –±–æ–ª—å—à–µ ${message.user.limit.farmlimit} —à—Ç—É–∫ —Ñ–µ—Ä–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.`);
      }
    } else {
      if (count + message.user.misc.farm_count > 1000000) {
        if (count + message.user.misc.farm_count > message.user.limit.farmlimit) {
          return bot(`‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –±–æ–ª—å—à–µ ${message.user.limit.farmlimit} —à—Ç—É–∫ —Ñ–µ—Ä–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.`);
        }
      }
    }

    if (message.user.misc.farm != 0 && message.user.misc.farm != message.args[1]) {
      return bot(`üò® –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ñ–µ—Ä–º—É –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞!`);
    }

    if (message.user.balance < sell.cost * count) {
      return bot(`üí∞ –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1} üíµ`);
    } else {
      message.user.balance -= sell.cost * count;
      message.user.misc.farm = sell.id;
      message.user.misc.farm_count += count;


      if (message.user.now.kv1 && !message.user.now.kv2) { 
        message.user.now.kv2 = true;
        message.user.misc.farm_count += 10;
        await bot(`‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª 2 –∑–∞–¥–∞–Ω–∏–µ! 
      –ù–∞–≥—Ä–∞–¥–∞ - 10 —Ñ–µ—Ä–º üîã. 
      
      üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π —á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–±–∏—Ä–∞—Ç—å —Å —Ñ–µ—Ä–º—ã –±–∏—Ç–∫–æ–∏–Ω—ã –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏—Ö –∑–∞ ${val1}!`, {
          keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
              [{
                "action": {
                  "type": "text",
                  payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                  "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                },
                "color": "positive"
              }]
            ]
          })
        });
      }

      return bot(`üéâ –í—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª (${count} —à—Ç.) –∑–∞ ${utils.sp(sell.cost * count)} ${val1}`);
    }
  }
});

cmd.hear(/^(?:—Ñ–µ—Ä–º–∞)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.misc.farm) return bot(`—É –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã`);

    if (!message.user.farm_btc)
      return bot(`–Ω–∞ –≤–∞—à–µ–π —Ñ–µ—Ä–º–µ –ø—É—Å—Ç–æ, –Ω–æ–≤—ã–µ –±–∏—Ç–∫–æ–∏–Ω—ã –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ`);

    let btc_ = message.user.farm_btc * message.user.misc.farm_count;

    if (message.user.farm_count >= 10000000) Math.floor((btc_ /= 2));

    message.user.btc += btc_;

    message.user.farm_btc = 0;

    return bot(`–≤—ã —Å–æ–±—Ä–∞–ª–∏ ${utils.sp(
      btc_
    )} ‚Çø, —Å–ª–µ–¥—É—é—â–∏–µ –±–∏—Ç–∫–æ–∏–Ω—ã –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å
üíæ –ë–∏—Ç–∫–æ–∏–Ω–æ–≤: ${utils.sp(message.user.btc)} ‡∏ø`);
  }
});

cmd.hear(/^(?:—Ñ–µ—Ä–º–∞ –∏–Ω—Ñ–æ)$/i, async (message, bot) => {
  const farmss = [
    { id: 1, name: farms.find((x) => x.id === Number(1)).name, prib: farms.find((x) => x.id === Number(1)).prib },
    { id: 2, name: farms.find((x) => x.id === Number(2)).name, prib: farms.find((x) => x.id === Number(2)).prib },
    { id: 3, name: farms.find((x) => x.id === Number(3)).name, prib: farms.find((x) => x.id === Number(3)).prib },
    { id: 4, name: farms.find((x) => x.id === Number(4)).name, prib: farms.find((x) => x.id === Number(4)).prib },
    { id: 5, name: farms.find((x) => x.id === Number(5)).name, prib: farms.find((x) => x.id === Number(5)).prib },
    { id: 6, name: farms.find((x) => x.id === Number(6)).name, prib: farms.find((x) => x.id === Number(6)).prib },
    { id: 7, name: farms.find((x) => x.id === Number(7)).name, prib: farms.find((x) => x.id === Number(7)).prib },
  ];

  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.misc.farm) return bot('—É –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º—ã');

    const farmCount = message.user.misc.farm_count;
    const farmType = message.user.misc.farm; // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ñ–µ—Ä–º—ã
    const farm = farmss.find(f => f.id === farmType); // –ù–∞—Ö–æ–¥–∏–º —Ñ–µ—Ä–º—É –ø–æ —Ç–∏–ø—É

    if (!farm) {
      return bot('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–µ—Ä–º–µ.');
    }

    const btcPerHourPerFarm = farm.prib; 
    
    const nameferm = farm.name; // –ò—Å–ø–æ–ª—å–∑—É–µ–º farm.prib

    const btc_ = message.user.farm_btc ;

    let btcPerHourTotal = Math.round(btcPerHourPerFarm * farmCount)


    const formattedBtcPerHourTotal = utils.sp(btcPerHourTotal); // –£–±—Ä–∞–ª–∏ toFixed(3)

    return bot(`–ù–∞ –≤–∞—à–∏—Ö —Ñ–µ—Ä–º–∞—Ö –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å ${utils.sp(btc_)} ‚Çø üåê \n` +
               `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
               `üìä –ù–∞–∑–≤–∞–Ω–∏–µ: ${nameferm}\n` +
               `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${utils.sp(farmCount)} —à—Ç.\n` +
               `‚úÖ –î–æ—Ö–æ–¥: ${formattedBtcPerHourTotal} ‡∏ø/—á–∞—Å`);
  }
});

module.exports = commands;
