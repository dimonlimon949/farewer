let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let botinfo = require('../database/botinfo.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}


const tokenData = getToken();

const chatlogi = tokenData.chatlogi; 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 



function unixStampLefta(stampa) {
  stampa = stampa / 1000;
  let s = stampa % 60;
  stampa = (stampa - s) / 60;
  let m = stampa % 60;
  let text = ``;
  if (m > 0) text += addZero(Math.floor(m)) + " –º–∏–Ω. ";
  if (s > 0) text += addZero(Math.floor(s)) + " —Å–µ–∫.";
  return text;
}

function addZero(i) {
  return i < 10 ? "0" + i : i;
}

let kursrudtime = Date.now() + 301000;

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

const val1 = tokenData3.val1
const val2 = tokenData3.val2
const val3 = tokenData3.val3
const val4 = tokenData3.val4
const val5 = tokenData3.val5

cmd.hear(/^(?:–ö—É—Ä—Å —Ä—É–¥—ã|üíé –ö—É—Ä—Å —Ä—É–¥—ã)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    let text = `–ö—É—Ä—Å —Ä—É–¥—ã:\n`;

    if (botinfo.kursplazma > 1400000)
      text += `üÜô –†—É–¥—É ¬´–ü–ª–∞–∑–º–∞¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kursobsidian > 1100000)
      text += `üÜô –†—É–¥—É ¬´–û–±—Å–∏–¥–∏–∞–Ω¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kursmateria > 1000000)
      text += `üÜô –†—É–¥—É ¬´–ú–∞—Ç–µ—Ä–∏—è¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kursalmaz > 700000)
      text += `üÜô –†—É–¥—É ¬´–ê–ª–º–∞–∑¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kurszoloto > 300000)
      text += `üÜô –†—É–¥—É ¬´–ó–æ–ª–æ—Ç–æ¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kurszhelezo > 100000)
      text += `üÜô –†—É–¥—É ¬´–ñ–µ–ª–µ–∑–æ¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    text += `\n‚öôÔ∏è 1 –∂–µ–ª–µ–∑–æ - ${utils.sp(botinfo.kurszhelezo)} ${val1}`;

    text += `\nüèµ 1 –∑–æ–ª–æ—Ç–æ - ${utils.sp(botinfo.kurszoloto)} ${val1}`;

    text += `\nüíé 1 –∞–ª–º–∞–∑ - ${utils.sp(botinfo.kursalmaz)} ${val1}`;

    text += `\nüåå 1 –º–∞—Ç–µ—Ä–∏—è - ${utils.sp(botinfo.kursmateria)} ${val1}`;

    text += `\nüåå 1 –æ–±—Å–∏–¥–∏–∞–Ω - ${utils.sp(botinfo.kursobsidian)} ${val1}`;

    text += `\nüåå 1 –ø–ª–∞–∑–º–∞ - ${utils.sp(botinfo.kursplazma)} ${val1}`;

    text += `\n\nüîÑ –ö—É—Ä—Å —Ä—É–¥—ã –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${unixStampLefta(
      kursrudtime - Date.now()
    )} ‚è≥`;

    return bot(text);
  }
});

setInterval(() => {
  if (kursrudtime > Date.now()) {
    kursrudtime -= 1;
  }
  if (kursrudtime <= Date.now()) {
    kursrudtime = Date.now() + 301000;
  }
}, 1000);


module.exports = commands;
