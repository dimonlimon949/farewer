const fs = require('fs');
const { VK } = require('vk-io');
const double = require('../database/users.json')

const commands = [];
const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

// --------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';
const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';
const tokensFilePath2 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–¥ –±–µ—Å–µ–¥.json';

function getToken(filePath) {
    try {
        const tokens = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        return tokens;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        return null;
    }
}

const tokenData = getToken(tokensFilePath);
const tokenData4 = getToken(tokensFilePath4);
const tokenData2 = getToken(tokensFilePath2);

const spolerIds = tokenData4 ? Object.values(tokenData4)
    .map(id => Number(id))
    .filter(id => Number.isInteger(id) && id > 0) : [];

const chatlogi = tokenData2?.chatlogi;

const vk = require('../vk-api.js'); 

// --------- –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ----------

const bannedWords = [/–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å/i, /–∑–∞ –¥–µ–Ω—å/i, /—Ä–µ–∫–ª–∞–º–∞/i, /–ø–µ—Ä–µ—Ö–æ–¥–∏/i, /–±–µ—Å–ø–ª–∞—Ç–Ω–æ/i];

function containsBannedContent(text) {
    if (!text) return false;
    for (const word of bannedWords) {
        if (word.test(text)) return true;
    }
    const linkRegex = /(?:https?:\/\/|www\.)[^\s]+/i;
    if (linkRegex.test(text)) return true;
    return false;
}

// --------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

async function resolveTargetId(arg) {
    // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç - —á–∏—Å–ª–æ (UID)
    if (!isNaN(Number(arg))) {
        const user = double.find(u => u.uid === Number(arg) || (u.astats && u.astats.fakeid === Number(arg)));
        return user ? { vkId: user.id, uid: user.uid } : null;
    }

    // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç - —Å—Å—ã–ª–∫–∞ –í–ö
    if (arg.match(/vk\.com|m\.vk\.com/i)) {
        const screenName = arg.replace(/((http|https):\/\/(vk.com|m.vk.com)\/|(vk.com)\/)/gi, "").split('/')[0];
        try {
            const resolveResponse = await vk.api.utils.resolveScreenName({ screen_name: screenName });
            if (resolveResponse && resolveResponse.type === 'user') {
                // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ, –Ω–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º VK ID
                const user = double.find(u => u.id === resolveResponse.object_id);
                return { 
                    vkId: resolveResponse.object_id,
                    uid: user ? (user.astats?.fakeid || user.uid) : null,
                    screenName: screenName
                };
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ resolveScreenName:", error);
        }
    }

    return null;
}

async function kickUser(message, bot, target, reason = "–∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞") {
    if (spolerIds.includes(Number(message.user.id))) {
        return message.reply("–ù–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π!");
    }

    const targetData = await resolveTargetId(target);
    
    if (!targetData || !targetData.vkId) {
        return message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ UID.");
    }



    try {
        await vk.api.messages.removeChatUser({ 
            chat_id: message.chatId, 
            user_id: targetData.vkId 
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let infoMessage;
        if (targetData.uid) {
            infoMessage = `üí§ –ò–≥—Ä–æ–∫ UID: ${targetData.uid}`;
        } else if (targetData.screenName) {
            infoMessage = `üí§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å vk.com/${targetData.screenName}`;
        } else {
            infoMessage = `üí§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${targetData.vkId}`;
        }

        await message.reply(`${infoMessage} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∑–∞ ${reason}.`);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        vk.api.messages.send({
            chat_id: chatlogi,
            message: `‚ö° –ê–¥–º–∏–Ω [id${message.user.id}|${message.user.tag}] –∫–∏–∫–Ω—É–ª ${infoMessage} –∑–∞ ${reason}.`,
            random_id: 0
        });

    } catch (e) {
        if (e.code === 935) {
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–µ—Å–µ–¥–µ.");
        } else if (e.code === 15) {
            await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
        } else {
            console.error(e);
            await message.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ. –ö–æ–¥: ${e.code}`);
        }
    }
}



// --------- –ö–æ–º–∞–Ω–¥—ã ----------

cmd.hear(/^(?:–∫–∏–∫)\s+([^\s]+)(?:\s+(.+))?/i, async (message, bot) => {
    if (message.user.settings.adm < 5)
        return bot(`–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ç–∞—Ä—à–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—à–µ`);

    const [, target, reason] = message.text.match(/^(?:–∫–∏–∫)\s+([^\s]+)(?:\s+(.+))?/i);
    const kickReason = reason || "–∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞";
    
    await kickUser(message, bot, target, kickReason);
});




cmd.hear(/^(?:–∫–∏–∫)$/i, async (message, bot) => {

    if (message.chat.type !== 4) {
        const actionLog = {
            admin: {
                id: message.user.id,
                tag: message.user.tag
            },
            chatId: message.chatId,
            timestamp: new Date().toISOString(),
            action: 'kick_attempt',
            status: 'started'
        };
    
        try {
            
    
            if (message.user.bankik) {
                actionLog.status = 'rejected';
                actionLog.reason = 'admin_disabled';
                await logAction(actionLog);
                return bot(`–æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π ‚ö†`);
            }
    
            if (!message.replyMessage) {
                actionLog.status = 'rejected';
                actionLog.reason = 'no_target';
                await logAction(actionLog);
                return message.reply(`‚ö† –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∫–∏–∫–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)`);
            }
    
            const targetId = message.replyMessage.senderId;
            const isCommunity = targetId < 0;
            const absoluteId = Math.abs(targetId);
            actionLog.target = {
                id: targetId,
                type: isCommunity ? 'community' : 'user',
                absoluteId: absoluteId
            };
    
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
            if (message.chat.type !== 4 && message.user.settings?.adm < 5) {
                actionLog.status = 'rejected';
                actionLog.reason = 'insufficient_permissions';
                await logAction(actionLog);
                return;
            }
    
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π
            if (spolerIds.includes(absoluteId)) {
                actionLog.status = 'rejected';
                actionLog.reason = 'target_is_creator';
                await logAction(actionLog);
                return message.reply(`‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π!`);
            }
    
            if (isCommunity) {
                // –û–°–û–ë–´–ô –°–ü–û–°–û–ë –ö–ò–ö–ê –°–û–û–ë–©–ï–°–¢–í–ê
                actionLog.action = 'community_kick';
                await logAction(actionLog);
    
                try {
                    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã
                    const members = await vk.api.messages.getConversationMembers({
                        peer_id: message.peerId
                    });
    
                    // 2. –ò—â–µ–º –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    const communityMember = members.items.find(item => 
                        item.member_id === targetId
                    );
    
                    if (!communityMember) {
                        actionLog.status = 'failed';
                        actionLog.reason = 'community_not_in_chat';
                        await logAction(actionLog);
                        return message.reply(`‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –≤ –±–µ—Å–µ–¥–µ.`);
                    }
    
                    // 3. –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    await vk.api.messages.removeChatUser({
                        chat_id: message.chatId,
                        member_id: communityMember.member_id
                    });
    
                    actionLog.status = 'success';
                    await logAction(actionLog);
    
                    return message.reply(`‚úÖ –°–æ–æ–±—â–µ—Å—Ç–≤–æ *club${absoluteId} —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–æ!`);
    
                } catch (e) {
                    actionLog.status = 'failed';
                    actionLog.error = {
                        code: e.code,
                        message: e.message
                    };
                    await logAction(actionLog);
    
                    console.error('–û—à–∏–±–∫–∞ –∫–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', e);
                    return message.reply(`‚ö† –û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${e.message}`);
                }
            } else {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                actionLog.action = 'user_kick';
                await logAction(actionLog);
    
                try {
                    await vk.api.messages.removeChatUser({
                        chat_id: message.chatId,
                        user_id: targetId
                    });
    
                    actionLog.status = 'success';
                    await logAction(actionLog);
    
                    return message.reply(`‚úÖ [id${targetId}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ –∫–∏–∫–Ω—É—Ç!`);
    
                } catch (e) {
                    actionLog.status = 'failed';
                    actionLog.error = {
                        code: e.code,
                        message: e.message
                    };
                    await logAction(actionLog);
    
                    if (e.code === 935) {
                        return message.reply(`‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–µ—Å–µ–¥–µ.`);
                    }
                    console.error('–û—à–∏–±–∫–∞ –∫–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
                    return message.reply(`‚ö† –û—à–∏–±–∫–∞ –∫–∏–∫–∞: ${e.message}`);
                }
            }
    
        } catch (error) {
            actionLog.status = 'critical_error';
            actionLog.error = {
                message: error.message,
                stack: error.stack
            };
            await logAction(actionLog);
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–∏–∫–∞:', error);
            return message.reply(`‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.`);
        }
    }

    if (message.chat.type == 4) {

        if ( message.user.settings.adm < 6) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            return message.reply("–∏—Å–∫–ª—é—á–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã 6 —É—Ä–æ–≤–Ω—è");
        }


        const actionLog = {
            admin: {
                id: message.user.id,
                tag: message.user.tag
            },
            chatId: message.chatId,
            timestamp: new Date().toISOString(),
            action: 'kick_attempt',
            status: 'started'
        };
    
        try {
            
    
            if (message.user.bankik) {
                actionLog.status = 'rejected';
                actionLog.reason = 'admin_disabled';
                await logAction(actionLog);
                return bot(`–æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π ‚ö†`);
            }
    
            if (!message.replyMessage) {
                actionLog.status = 'rejected';
                actionLog.reason = 'no_target';
                await logAction(actionLog);
                return message.reply(`‚ö† –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∫–∏–∫–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)`);
            }
    
            const targetId = message.replyMessage.senderId;
            const isCommunity = targetId < 0;
            const absoluteId = Math.abs(targetId);
            actionLog.target = {
                id: targetId,
                type: isCommunity ? 'community' : 'user',
                absoluteId: absoluteId
            };
    
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
            if (message.chat.type !== 4 && message.user.settings?.adm < 5) {
                actionLog.status = 'rejected';
                actionLog.reason = 'insufficient_permissions';
                await logAction(actionLog);
                return;
            }
    
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π
            if (spolerIds.includes(absoluteId)) {
                actionLog.status = 'rejected';
                actionLog.reason = 'target_is_creator';
                await logAction(actionLog);
                return message.reply(`‚ùå –ù–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π!`);
            }
    
            if (isCommunity) {
                // –û–°–û–ë–´–ô –°–ü–û–°–û–ë –ö–ò–ö–ê –°–û–û–ë–©–ï–°–¢–í–ê
                actionLog.action = 'community_kick';
                await logAction(actionLog);
    
                try {
                    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã
                    const members = await vk.api.messages.getConversationMembers({
                        peer_id: message.peerId
                    });
    
                    // 2. –ò—â–µ–º –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    const communityMember = members.items.find(item => 
                        item.member_id === targetId
                    );
    
                    if (!communityMember) {
                        actionLog.status = 'failed';
                        actionLog.reason = 'community_not_in_chat';
                        await logAction(actionLog);
                        return message.reply(`‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –≤ –±–µ—Å–µ–¥–µ.`);
                    }
    
                    // 3. –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    await vk.api.messages.removeChatUser({
                        chat_id: message.chatId,
                        member_id: communityMember.member_id
                    });
    
                    actionLog.status = 'success';
                    await logAction(actionLog);
    
                    return message.reply(`‚úÖ –°–æ–æ–±—â–µ—Å—Ç–≤–æ *club${absoluteId} —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–æ!`);
    
                } catch (e) {
                    actionLog.status = 'failed';
                    actionLog.error = {
                        code: e.code,
                        message: e.message
                    };
                    await logAction(actionLog);
    
                    console.error('–û—à–∏–±–∫–∞ –∫–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', e);
                    return message.reply(`‚ö† –û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${e.message}`);
                }
            } else {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                actionLog.action = 'user_kick';
                await logAction(actionLog);
    
                try {
                    await vk.api.messages.removeChatUser({
                        chat_id: message.chatId,
                        user_id: targetId
                    });
    
                    actionLog.status = 'success';
                    await logAction(actionLog);
    
                    return message.reply(`‚úÖ [id${targetId}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] —É—Å–ø–µ—à–Ω–æ –∫–∏–∫–Ω—É—Ç!`);
    
                } catch (e) {
                    actionLog.status = 'failed';
                    actionLog.error = {
                        code: e.code,
                        message: e.message
                    };
                    await logAction(actionLog);
    
                    if (e.code === 935) {
                        return message.reply(`‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–µ—Å–µ–¥–µ.`);
                    }
                    console.error('–û—à–∏–±–∫–∞ –∫–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
                    return message.reply(`‚ö† –û—à–∏–±–∫–∞ –∫–∏–∫–∞: ${e.message}`);
                }
            }
    
        } catch (error) {
            actionLog.status = 'critical_error';
            actionLog.error = {
                message: error.message,
                stack: error.stack
            };
            await logAction(actionLog);
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–∏–∫–∞:', error);
            return message.reply(`‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.`);
        }
    }






});

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async function logAction(data) {
    try {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
        const statusTranslations = {
            'started': '–Ω–∞—á–∞—Ç–æ',
            'success': '—É—Å–ø–µ—à–Ω–æ',
            'failed': '–æ—à–∏–±–∫–∞',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            'critical_error': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è_–æ—à–∏–±–∫–∞'
        };
        
        const translatedStatus = statusTranslations[data.status] || data.status;

        const logMessage = `üîπ ${data.action.toUpperCase()}:
üë§ –ê–¥–º–∏–Ω: [id${data.admin.id}|${data.admin.tag}]
üéØ –¶–µ–ª—å: ${data.target?.type === 'community' ? '@club'+data.target.absoluteId : '@id'+data.target?.absoluteId}
üìå –ß–∞—Ç: ${data.chatId}
üîÑ –°—Ç–∞—Ç—É—Å: ${translatedStatus}
${data.error ? `‚ùó –û—à–∏–±–∫–∞: ${data.error.message} (–∫–æ–¥ ${data.error.code})` : ''}`;

        await vk.api.messages.send({
            chat_id: chatlogi,
            message: logMessage,
            random_id: 0
        });

        // –î–ª—è –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
        if (data.status === 'failed' || data.status === 'critical_error') {
            await vk.api.messages.send({
                chat_id: chatlogi,
                message: `üìõ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${JSON.stringify(data.error).substring(0, 4000)}`,
                random_id: 0
            });
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏:', e);
    }
}

cmd.hear(/^(?:\/q)$/i, async (message, bot) => {
    let targetUserId = message.user.id;

    if (!targetUserId) {
        return message.reply("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.");
    }

    if (spolerIds.includes(Number(targetUserId))) {
        return message.reply(`–°–æ–∑–¥–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–∫–∏–¥–∞—Ç—å —á–∞—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /q!`);
    }
    try {
        await vk.api.messages.removeChatUser({ chat_id: message.chatId, user_id: targetUserId });
        vk.api.messages.send({
            chat_id: chatlogi,
            message: `‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *id${message.user.id} —Å–∞–º–æ–ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–ª—Å—è –∏–∑ –±–µ—Å–µ–¥—ã!`,
            random_id: 0
        });
    } catch (e) {
        if (e.code === 935) {
            await message.reply(`–í–∞—Å –Ω–µ—Ç –≤ —á–∞—Ç–µ.`);
        } else {
            console.error(e);
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '/q'. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.");
        }
    }
});

module.exports = commands;