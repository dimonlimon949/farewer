let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}


// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const businesses = require("../spisok/business spisok.js")
const businesses2 = require("../spisok/–±–∏–∑–Ω–µ—Å—ã.js")

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5


cmd.hear(/^(?:–±–∏–∑–Ω–µ—Å—ã|üíº –ë–∏–∑–Ω–µ—Å—ã)\s?([0-9]+)?$/i, async (message, bot) => {
  try {
    let response = null; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    if (!message.isChat || message.chat.type === 1) {
      response = await showBusinessListPrivate(message, bot); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    } else if (message.chat.type === 2) {
      response = await showBusinessListGroup(message, bot); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    }
    return response; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–±–∏–∑–Ω–µ—Å—ã:", error);
    const errorText = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    await bot(errorText);
    return errorText; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
  }
});

async function showBusinessListPrivate(message, bot) {
    if (!message.args[1]) {
        let businessList = `üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã: üè¢ ‚ú®\n\n`;
        for (let i = 0; i < businesses2.length && i < 13; i++) {
            const business = businesses2[i][0];
            const numberEmoji = getNumberEmoji(i + 1);
            let totalEarn = parseInt(business.earn); // –ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ = –¥–æ—Ö–æ–¥ –±–∞–∑—ã
            for (let j = 1; j < businesses2[i].length; j++) {
                const upgrade = businesses2[i][j];
                totalEarn += parseInt(upgrade.earn)
            }
            const dailyIncome = totalEarn * 24; // –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å
            businessList += `${numberEmoji} ${business.icon} ${business.name} - ${utils.sp(business.cost)} ${val1}\n`;
            businessList += `   üí∞ –ü—Ä–∏–±—ã–ª—å: ${utils.sp(business.earn)} ${val1}/—á–∞—Å\n`;
            //  businessList += `   ü§ë –ü—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å: ${utils.sp(dailyIncome)} $\n`;
            //  businessList += `   üõ†Ô∏è –£–ª—É—á—à–µ–Ω–∏—è: üõ†Ô∏è\n`;
            //  for (let j = 1; j < businesses2[i].length; j++) {
            //    const upgrade = businesses2[i][j];
            //    businessList += `     - –£–ª—É—á—à–µ–Ω–∏–µ ${j}: +${utils.sp(upgrade.earn)} $/—á–∞—Å\n`;
            // }
            businessList += "\n";
        }

        businessList += `üìù –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–ë–∏–∑–Ω–µ—Å—ã [–Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞]¬ª`;
        return bot(businessList);
    }

    if (message.user.inf === true) return bot(`üö´ –í—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`);

    if (message.user.settings.busi === true) {
        if (message.user.business2.length >= 2)
            return bot(`üö´ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–º–µ—Ç—å 2 –±–∏–∑–Ω–µ—Å–∞`);
    } else {
        if (message.user.business2.length >= 1)
            return bot(`üö´ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–º–µ—Ç—å 1 –±–∏–∑–Ω–µ—Å`);
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –≤ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
    const businessNumber = Number(message.args[1]);
    if (isNaN(businessNumber)) {
        return bot("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (–Ω–µ —á–∏—Å–ª–æ).");
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –±–∏–∑–Ω–µ—Å–∞
    let businessIndex = businessNumber - 1;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    console.log("message.args[1]:", message.args[1]);
    console.log("businessIndex:", businessIndex);
    console.log("businesses2.length:", businesses2.length);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ businessIndex –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if (businessIndex < 0 || businessIndex >= businesses2.length) {
        return bot("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞).");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ businesses2[businessIndex] —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è null/undefined
    if (!businesses2[businessIndex] || !Array.isArray(businesses2[businessIndex]) || businesses2[businessIndex].length === 0) {
        console.error("–û—à–∏–±–∫–∞: businesses2[" + businessIndex + "] –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç.");
        return bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }

    const sell = businesses2[businessIndex][0];

    if (sell == null) return;

    if (message.user.balance < sell.cost)
        return bot(
            `üö´ –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(
                message.user.balance
            )} ${val1} üíµ`
        );

    message.user.balance -= sell.cost;

    message.user.business2.push({
        id: businessIndex + 1,
        upgrade: 1,
        workers: 1,
        moneys: 0,
    });

    if (message.user.now.kv1 && message.user.now.kv2 && !message.user.now.kv3) {

        message.user.now.kv3 = true;
        message.user.bank += 50000000;
        const taskCompleteMessage = `‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏–µ! –ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞–≥—Ä–∞–¥–∞ - 50.000.000 ${val1} –Ω–∞ —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç\n\nüí° –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π –±–∏–∑–Ω–µ—Å—ã –∏ –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–±—ã–ª—å!`;
        await bot(taskCompleteMessage, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                            "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                        },
                        "color": "positive"
                    }]
                ]
            })
        });
        return taskCompleteMessage;


    }

    const purchaseMessage = `üéâ –í—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(sell.cost)} ${val1} üöÄ`;
    return bot(purchaseMessage);
}


function getNumberEmoji(number) {
    if (number >= 1 && number <= 9) {
        const circleNumbers = [
            "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"
        ];
        return circleNumbers[number - 1];
    }
    else if (number >= 10 && number <= 20) {
        const circleNumbers = [
            "1Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£", "2Ô∏è‚É£0Ô∏è‚É£"
        ];
        return circleNumbers[number - 10];
    }
    else if (number >= 21 && number <= 30) {
        const circleNumbers = [
            "2Ô∏è‚É£1Ô∏è‚É£", "2Ô∏è‚É£2Ô∏è‚É£", "2Ô∏è‚É£3Ô∏è‚É£", "2Ô∏è‚É£4Ô∏è‚É£", "2Ô∏è‚É£5Ô∏è‚É£", "2Ô∏è‚É£6Ô∏è‚É£", "2Ô∏è‚É£7Ô∏è‚É£", "2Ô∏è‚É£8Ô∏è‚É£", "2Ô∏è‚É£9Ô∏è‚É£", "3Ô∏è‚É£0Ô∏è‚É£"
        ];
        return circleNumbers[number - 21]
    }
    else {
        return number.toString();
    }
}

async function showBusinessListGroup(message, bot) {
    if (!message.args[1]) {
        let businessList = `üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã: üè¢ ‚ú®\n\n`;
        for (let i = 0; i < businesses.length; i++) {
            const business = businesses[i][0];
            const numberEmoji = getNumberEmoji(i + 1);
            let totalEarn = parseInt(business.earn);
            for (let j = 1; j < businesses[i].length; j++) {
                const upgrade = businesses[i][j];
                totalEarn += parseInt(upgrade.earn)
            }
            const dailyIncome = totalEarn * 24; // –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å
            businessList += `‚≠ê ${numberEmoji} ${business.icon} ${business.name} (ID: ${business.id}) - ${utils.sp(business.cost)} ${val4}\n`;
            businessList += `   üí∞ –ü—Ä–∏–±—ã–ª—å: ${utils.sp(business.earn)} ${val4}/—á–∞—Å\n`;
            // businessList += `   ü§ë –ü—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å: ${utils.sp(dailyIncome)} ${val4}\n`;
            // businessList += `   üõ†Ô∏è –£–ª—É—á—à–µ–Ω–∏—è: üõ†Ô∏è\n`;
            //  for (let j = 1; j < businesses[i].length; j++) {
            //    const upgrade = businesses[i][j];
            //    businessList += `     - –£–ª—É—á—à–µ–Ω–∏–µ ${j}: +${utils.sp(upgrade.earn)} ${val4}/—á–∞—Å\n`;
            // }
            businessList += "\n";
        }
        businessList += `üìù –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–ë–∏–∑–Ω–µ—Å—ã [–Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞]¬ª`;
        return bot(businessList);
    }

    if (!message.user.settings) {
        message.user.settings = {};
    }

    if (message.user.settings.busi === true) {
        if (message.user.business.length >= 2)
            return bot(`üö´ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–º–µ—Ç—å 2 –±–∏–∑–Ω–µ—Å–∞`);
    } else {
        if (message.user.business.length >= 1)
            return bot(`üö´ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–º–µ—Ç—å 1 –±–∏–∑–Ω–µ—Å1`);
    }

    if (message.args[1] < 1 || message.args[1] >= 9)
        return bot("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞.");

    let businessIndex = Number(message.args[1]) - 1;

    const sell = businesses[businessIndex][0];

    if (sell == null) return;

    if (message.user.balance2 < sell.cost)
        return bot(
            `üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(
                message.user.balance2
            )} ${val4}. üíµ`
        );

    message.user.balance2 -= sell.cost;

    if (message.user.questbrak == false) {

        message.user.questbrak = true;

        const questCompleteMessage = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å –Ω–∞ ${val4} –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ üì¶ 200 —Ä–µ–π—Ç–∏–Ω–≥–∞.`;
        await bot(questCompleteMessage);
        message.user.rating += 200;
        await questCompleteMessage;

    }

    if (message.user.now.kv1 && message.user.now.kv2 && !message.user.now.kv3) {

        message.user.balance2 += 25000;
        message.user.now.kv3 = true;
        const taskCompleteMessage = `‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏–µ! –ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞–≥—Ä–∞–¥–∞ - 25.000 ${val4}\n\nüí° –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π –±–∏–∑–Ω–µ—Å—ã –∏ –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–±—ã–ª—å!`;
        await bot(taskCompleteMessage, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                            "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                        },
                        "color": "positive"
                    }]
                ]
            })

        });
        return taskCompleteMessage;

    }

    message.user.business.push({
        id: businessIndex + 1,
        upgrade: 1,
        workers: 1,
        moneys: 0,
    });

    const purchaseMessage = `üéâ –í—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(sell.cost)} ${val4} üöÄ`;
    return bot(purchaseMessage);
}

let tokensCache = null;

setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }
}, 1000);

module.exports = commands;